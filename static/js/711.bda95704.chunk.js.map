{"version":3,"file":"static/js/711.bda95704.chunk.js","mappings":"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","sources":["containers/FamilyDetails/Events.js"],"sourcesContent":["import ContentHeader from \"../ContentHeader\";\r\nimport { loadState } from \"@lib/helpers/localStorage\";\r\nimport SearchFamily from \"./SearchFamily\";\r\nimport ReadFamilyDetails from \"./ReadFamilyDetails\";\r\nimport UpcomingEvents from \"./UpcomingEvents\";\r\nimport FamilyDetailsWrapper from \"./styles\";\r\n//import { cloneDeep } from \"lodash\";// Add cloneDeep to the lodash library\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Tree } from \"./FamilyTree\";\r\n//import Tree from \"../../components/uielements/tree\";\r\nimport {\r\n  DownOutlined,\r\n} from \"@ant-design/icons\";\r\nimport familyDetails from \"./familyDetails.json\";\r\n\r\nfunction unflatten(items) {\r\n  var tree = [],\r\n      mappedArr = {}\r\n\r\n  // Build a hash table and map items to objects\r\n  items.forEach(function(item) {\r\n    var key = item.No;\r\n    if (!mappedArr.hasOwnProperty(key)) { // in case of duplicates\r\n      mappedArr[key] = item; // the extracted id as key, and the item as value\r\n      mappedArr[key].children = [];  // under each item, add a key \"children\" with an empty array as value\r\n    }\r\n  })\r\n\r\n  // If root-level nodes are not included in hash table, include them\r\n  items.forEach(function(item) {\r\n    var parentId = item.Parent;\r\n    if (!mappedArr.hasOwnProperty(parentId)) {\r\n      // make up an item for root-level node\r\n      const newItem = item;\r\n      newItem.key = 0;\r\n      newItem.Name = item.NAME;\r\n      newItem.Parent = item.Parent;\r\n      mappedArr[parentId] = newItem; // the parent id as key, and made-up an item as value\r\n      mappedArr[parentId].children = [];\r\n    }\r\n  })\r\n\r\n  // Loop over hash table\r\n  for (var key in mappedArr) {\r\n    if (mappedArr.hasOwnProperty(key)) {\r\n      const mappedElem = mappedArr[key];\r\n      mappedElem.key = mappedElem.No;\r\n\r\n      // If the element is not at the root level, add it to its parent array of children. Note this will continue till we have only root level elements left\r\n      if (mappedElem.Parent) {\r\n        var parentId = mappedElem.Parent;\r\n        var childItem = mappedElem;\r\n        var parentItem = mappedArr[parentId];\r\n        parentItem = fillRemainingDetailsInParent(parentItem, childItem);\r\n        childItem = fillRemainingDetails(parentItem, childItem);\r\n        console.log(\"after fillRemainingDetails: \") ;\r\n                console.log(childItem) ;\r\n\r\n\r\n        parentItem.children.push(childItem);\r\n      }\r\n\r\n      // If the element is at the root level, directly push to the tree\r\n      else {\r\n        tree.push(mappedElem);\r\n      }\r\n    }\r\n  }\r\n\r\n  return tree[0];\r\n\r\n}\r\nfunction fillRemainingDetailsInParent(parentItem, childItem) {\r\n    if (parentItem.RESADD !='') {\r\n        parentItem['RESADD'] = replaceNewLineWithBreakTag(parentItem.RESADD);\r\n    }\r\n    if (parentItem.RESADD =='' && childItem.RESADD !='') {\r\n        parentItem['RESADD'] = replaceNewLineWithBreakTag(childItem.RESADD);\r\n    }\r\n    if (parentItem.RESPHNO =='' && childItem.RESPHNO !='') {\r\n        parentItem['RESPHNO'] = childItem.RESPHNO;\r\n    }\r\n    if (childItem.Relation == 'H' || childItem.Relation == 'W' ) {\r\n        parentItem['SPOUSE'] = childItem.NAME;\r\n    }\r\n    return parentItem;\r\n}\r\nfunction fillRemainingDetails(parentItem, childItem) {\r\nconsole.log(\"inside fillRemainingDetails: \"+ childItem.NAME) ;\r\n    console.log(parentItem) ;\r\n    if (childItem.Relation == 'H' || childItem.Relation == 'W' ) {\r\n        childItem['DOA'] = parentItem.DOA;\r\n        childItem['SPOUSE'] = parentItem.NAME;\r\n    }\r\n    if (childItem.Relation == 'S' || childItem.Relation == 'D') {\r\n    console.log(parentItem.children.length)\r\n        childItem['FATHER'] = (parentItem.children != null &&\r\n        (parentItem.Relation == '' || parentItem.Relation == 'S')) ? parentItem.NAME :\r\n            (parentItem.children.length > 0 && parentItem.children[0].Relation == 'H' ? parentItem.children[0].NAME : '');\r\n        childItem['MOTHER'] = (parentItem.children != null &&\r\n        (parentItem.Relation == '' || parentItem.Relation == 'D')) ? parentItem.NAME :\r\n            (parentItem.children.length > 0 && parentItem.children[0].Relation == 'W' ? parentItem.children[0].NAME : '');\r\n    }\r\n    if (childItem.Relation == 'W' || childItem.Relation == 'H') {\r\n        childItem['FATHER'] = parentItem.FATHERINLAW;\r\n        childItem['MOTHER'] = parentItem.MOTHERINLAW;\r\n        childItem['FATHERINLAW'] = parentItem.FATHER;\r\n        childItem['MOTHERINLAW'] = parentItem.MOTHER;\r\n    }\r\n    if (childItem.RESADD =='') {\r\n        childItem['RESADD'] = replaceNewLineWithBreakTag(parentItem.RESADD);\r\n    }\r\n    if (childItem.RESPHNO =='') {\r\n        childItem['RESPHNO'] = parentItem.RESPHNO;\r\n    }\r\n    console.log(childItem) ;\r\n    return childItem;\r\n}\r\nfunction replaceNewLineWithBreakTag(text) {\r\n  // Replace the \\n with <br>\r\n    console.log(text);\r\n\r\n  var otext = text.replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\r\n  // Update the value of paragraph\r\n  console.log(otext);\r\n  return otext;\r\n}\r\n\r\nexport default function Events() {\r\n  const selectedMember = loadState(\"selectedMember\");\r\n  const selectedMemberName = `${selectedMember?.name?.first} ${selectedMember?.name?.last}`;\r\n   const tree = [];\r\n   tree.push(unflatten(familyDetails));\r\n  const [treeData, setTreeData] = useState(() => tree);\r\n  const [rawFamilyData, setRawFamilyData] = useState(() => familyDetails);\r\n\r\n\r\n  //setTreeData(unflatten(familyDetails));\r\n  //setTreeData(unflatten(familyDetails));\r\n /*const [rawFamilyData, setRawFamilyData] = useState({});\r\n  setRawFamilyData(familyDetails);\r\n  console.log(treeData);*/\r\n  console.log(treeData);\r\n  //<UpcomingEvents familyData = {rawFamilyData}/>\r\n\r\n  return (\r\n    <FamilyDetailsWrapper>\r\n      <ContentHeader headerTitle=\"Celebrations Time\" />\r\n       <UpcomingEvents familyData = {rawFamilyData}/>\r\n    </FamilyDetailsWrapper>\r\n  );\r\n}\r\n"],"names":["fillRemainingDetailsInParent","parentItem","childItem","RESADD","replaceNewLineWithBreakTag","RESPHNO","Relation","NAME","fillRemainingDetails","console","log","DOA","children","length","FATHERINLAW","MOTHERINLAW","FATHER","MOTHER","text","otext","replace","Events","selectedMember","loadState","tree","name","first","last","push","items","mappedArr","key","forEach","item","No","hasOwnProperty","parentId","Parent","newItem","Name","mappedElem","unflatten","familyDetails","useState","treeData","rawFamilyData","headerTitle","familyData"],"sourceRoot":""}