{"version":3,"file":"static/js/381.c5943380.chunk.js","mappings":"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","sources":["containers/FamilyDetails/index.js"],"sourcesContent":["import ContentHeader from \"../ContentHeader\";\nimport { loadState } from \"@lib/helpers/localStorage\";\nimport SearchFamily from \"./SearchFamily\";\nimport ReadFamilyDetails from \"./ReadFamilyDetails\";\nimport UpcomingEvents from \"./UpcomingEvents\";\nimport FamilyDetailsWrapper from \"./styles\";\n//import { cloneDeep } from \"lodash\";// Add cloneDeep to the lodash library\nimport React, { useRef, useState } from \"react\";\nimport { Tree } from \"./FamilyTree\";\n//import Tree from \"../../components/uielements/tree\";\nimport {\n  DownOutlined,\n} from \"@ant-design/icons\";\nimport familyDetails from \"./familyDetails.json\";\n\nfunction unflatten(items) {\n  var tree = [],\n      mappedArr = {}\n\n  // Build a hash table and map items to objects\n  items.forEach(function(item) {\n    var key = item.No;\n    if (!mappedArr.hasOwnProperty(key)) { // in case of duplicates\n      mappedArr[key] = item; // the extracted id as key, and the item as value\n      mappedArr[key].children = [];  // under each item, add a key \"children\" with an empty array as value\n    }\n  })\n\n  // If root-level nodes are not included in hash table, include them\n  items.forEach(function(item) {\n    var parentId = item.Parent;\n    if (!mappedArr.hasOwnProperty(parentId)) {\n      // make up an item for root-level node\n      const newItem = item;\n      newItem.key = 0;\n      newItem.Name = item.NAME;\n      newItem.Parent = item.Parent;\n      mappedArr[parentId] = newItem; // the parent id as key, and made-up an item as value\n      mappedArr[parentId].children = [];\n    }\n  })\n\n  // Loop over hash table\n  for (var key in mappedArr) {\n    if (mappedArr.hasOwnProperty(key)) {\n      const mappedElem = mappedArr[key];\n      mappedElem.key = mappedElem.No;\n\n      // If the element is not at the root level, add it to its parent array of children. Note this will continue till we have only root level elements left\n      if (mappedElem.Parent) {\n        var parentId = mappedElem.Parent;\n        var childItem = mappedElem;\n        var parentItem = mappedArr[parentId];\n        parentItem = fillRemainingDetailsInParent(parentItem, childItem);\n        childItem = fillRemainingDetails(parentItem, childItem);\n        console.log(\"after fillRemainingDetails: \") ;\n                console.log(childItem) ;\n\n\n        parentItem.children.push(childItem);\n      }\n\n      // If the element is at the root level, directly push to the tree\n      else {\n        tree.push(mappedElem);\n      }\n    }\n  }\n\n  return tree[0];\n\n}\nfunction fillRemainingDetailsInParent(parentItem, childItem) {\n    parentItem['NAME'] = titleCase(parentItem.NAME);\n    /*if (parentItem.RESADD !='') {\n        parentItem['RESADD'] = replaceNewLineWithBreakTag(parentItem.RESADD);\n    }\n    if (parentItem.RESADD =='' && childItem.RESADD !='' && (childItem.Parent == parentItem.No) &&\n     (childItem.Relation == 'H' || childItem.Relation == 'W' || childItem.Relation == 'S') ) {\n        parentItem['RESADD'] = replaceNewLineWithBreakTag(childItem.RESADD);\n    }\n    if (parentItem.RESPHNO =='' && childItem.RESPHNO !='' && (childItem.Parent == parentItem.No) &&\n        (childItem.Relation == 'H' || childItem.Relation == 'W' || childItem.Relation == 'S') ) {\n        parentItem['RESPHNO'] = childItem.RESPHNO;\n    }*/\n    if (childItem.Relation == 'H' || childItem.Relation == 'W' && (childItem.Parent == parentItem.No) &&\n        (childItem.Relation == 'H' || childItem.Relation == 'W' || childItem.Relation == 'S') ) {\n        parentItem['SPOUSE'] = childItem.NAME;\n    }\n    return parentItem;\n}\nfunction fillRemainingDetails(parentItem, childItem) {\nconsole.log(\"inside fillRemainingDetails: \"+ childItem.NAME) ;\n    console.log(parentItem) ;\n    childItem['NAME'] = titleCase(childItem.NAME);\n    if (parentItem.EMAILID != '') {\n            parentItem['EMAILID'] = parentItem.EMAILID.toLowerCase();\n        }\n    if (childItem.EMAILID != '') {\n            childItem['EMAILID'] = childItem.EMAILID.toLowerCase();\n        }\n    if (childItem.Relation == 'H' || childItem.Relation == 'W' ) {\n        childItem['DOA'] = parentItem.DOA;\n        childItem['SPOUSE'] = parentItem.NAME;\n    }\n    if (childItem.Relation == 'S' || childItem.Relation == 'D') {\n    console.log(parentItem.children.length)\n        childItem['FATHER'] = (parentItem.children != null &&\n        (parentItem.Relation == '' || parentItem.Relation == 'S')) ? parentItem.NAME :\n            (parentItem.children.length > 0 && parentItem.children[0].Relation == 'H' ? parentItem.children[0].NAME : '');\n        childItem['MOTHER'] = (parentItem.children != null &&\n        (parentItem.Relation == '' || parentItem.Relation == 'D')) ? parentItem.NAME :\n            (parentItem.children.length > 0 && parentItem.children[0].Relation == 'W' ? parentItem.children[0].NAME : '');\n    }\n    if ((childItem.Relation == 'W' || childItem.Relation == 'H') && (childItem.Parent == parentItem.No)) {\n        if (parentItem.FATHERINLAW != '') {\n            parentItem['FATHERINLAW'] = titleCase(parentItem.FATHERINLAW);\n        }\n        if (parentItem.MOTHERINLAW != '') {\n            parentItem['MOTHERINLAW'] = titleCase(parentItem.MOTHERINLAW);\n        }\n        childItem['FATHER'] = parentItem.FATHERINLAW;\n        childItem['MOTHER'] = parentItem.MOTHERINLAW;\n        childItem['FATHERINLAW'] = parentItem.FATHER;\n        childItem['MOTHERINLAW'] = parentItem.MOTHER;\n    }\n    /*if (childItem.RESADD =='' && (childItem.Parent == parentItem.No)) {\n        childItem['RESADD'] = replaceNewLineWithBreakTag(parentItem.RESADD);\n    }*/\n    if (childItem.RESPHNO =='' && (childItem.Parent == parentItem.No)) {\n        childItem['RESPHNO'] = parentItem.RESPHNO;\n    }\n    console.log(childItem) ;\n    return childItem;\n}\nfunction titleCase(str) {\nconsole.log(str.split(' '));\n    if (typeof str !== 'undefined') {\n    return str\n        .split(' ')\n        .map((word) => word[0].toUpperCase() + word.slice(1).toLowerCase())\n        .join(' ');\n    } else {\n        return \"\";\n    }\n\n}\nfunction replaceNewLineWithBreakTag(text) {\n  // Replace the \\n with <br>\n    console.log(text);\n\n  var otext = text.replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\n  // Update the value of paragraph\n  console.log(otext);\n  return otext;\n}\n\nexport default function FamilyDetails() {\n  const selectedMember = loadState(\"selectedMember\");\n  const selectedMemberName = `${selectedMember?.name?.first} ${selectedMember?.name?.last}`;\n   const tree = [];\n   tree.push(unflatten(familyDetails));\n  const [treeData, setTreeData] = useState(() => tree);\n  const [rawFamilyData, setRawFamilyData] = useState(() => familyDetails);\n\n\n  //setTreeData(unflatten(familyDetails));\n  //setTreeData(unflatten(familyDetails));\n /*const [rawFamilyData, setRawFamilyData] = useState({});\n  setRawFamilyData(familyDetails);\n  console.log(treeData);*/\n  console.log(treeData);\n  //<UpcomingEvents familyData = {rawFamilyData}/>\n\n  return (\n    <FamilyDetailsWrapper>\n      <ContentHeader headerTitle=\"Family Details\" />\n      <ReadFamilyDetails treeData = {treeData}/>\n    </FamilyDetailsWrapper>\n  );\n}\n"],"names":["fillRemainingDetailsInParent","parentItem","childItem","titleCase","NAME","Relation","Parent","No","fillRemainingDetails","console","log","EMAILID","toLowerCase","DOA","children","length","FATHERINLAW","MOTHERINLAW","FATHER","MOTHER","RESPHNO","str","split","map","word","toUpperCase","slice","join","FamilyDetails","selectedMember","loadState","tree","name","first","last","push","items","mappedArr","key","forEach","item","hasOwnProperty","parentId","newItem","Name","mappedElem","unflatten","familyDetails","useState","treeData","headerTitle"],"sourceRoot":""}